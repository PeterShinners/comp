{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Comp",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#template-strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#declarations"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#system-scopes"
    },
    {
      "include": "#tags"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#shapes"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.semicolon.comp",
          "match": ";.*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.comp",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.comp",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "template-strings": {
      "patterns": [
        {
          "name": "string.template.comp",
          "begin": "%\"",
          "end": "\"",
          "patterns": [
            {
              "name": "meta.embedded.expression.comp",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "#variables"
                },
                {
                  "include": "#system-scopes"
                }
              ]
            },
            {
              "name": "constant.character.escape.comp",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.comp",
          "match": "\\b\\d+(?:\\.\\d+)?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.comp",
          "match": "\\b(if|else|while|forever|break|continue|match|transact)\\b"
        },
        {
          "name": "keyword.operator.comp",
          "match": "\\b(and|or|not|in)\\b"
        },
        {
          "name": "constant.language.comp",
          "match": "\\b(true|false|nil)\\b"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "keyword.declaration.comp",
          "match": "^\\s*!(import|func|shape|tag|entry|main|doc)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.local.comp",
          "match": "@[a-zA-Z_][a-zA-Z0-9_-]*"
        }
      ]
    },
    "system-scopes": {
      "patterns": [
        {
          "name": "variable.system.comp",
          "match": "\\$(?:in|ctx|mod|out|arg|repo|database)\\b"
        }
      ]
    },
    "tags": {
      "patterns": [
        {
          "name": "constant.other.tag.comp",
          "match": "#[a-zA-Z_][a-zA-Z0-9_.-]*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.pipeline.comp",
          "match": "\\|[a-zA-Z_][a-zA-Z0-9_-]*(?:/[a-zA-Z_][a-zA-Z0-9_-]*)?"
        },
        {
          "name": "keyword.operator.comp",
          "match": "\\?>"
        },
        {
          "name": "keyword.operator.comp",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.comp",
          "match": "\\.\\.(?![a-zA-Z])"
        },
        {
          "name": "keyword.operator.comp",
          "match": "\\|\\."
        },
        {
          "name": "keyword.operator.assignment.comp",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison.comp",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.arithmetic.comp",
          "match": "\\+|-|\\*|/"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.comp",
          "match": "\\|[a-zA-Z_][a-zA-Z0-9_-]*"
        }
      ]
    },
    "shapes": {
      "patterns": [
        {
          "name": "storage.type.shape.comp",
          "match": "~[a-zA-Z_][a-zA-Z0-9_-]*"
        }
      ]
    }
  },
  "scopeName": "source.comp"
}