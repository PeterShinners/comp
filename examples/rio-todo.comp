!doc module "TODO UI App, based on hypothetical migration from the Rio UI library for Python."

!import .rio = comp @gh/rio-dev/rio-comp@0.1.5/lib

!shape ~todo = {
    title~string
    complete~bool = false
}

!shape ~state = {
    todos~todo[] = {}
    input~string = ""
    filter#filter = #all.filter
}

!tag #filter = {
    #all = {"All" {#true #false}}
    #active = {"Active" {#false}}
    #complete = {"Complete" {#true}}
}

!main = {
    {title="Todo App" state={..~state}} |app.rio .{:todo-app}
}

!func :todo-app ~{} = {
    $s = (|fetch-state.rio)
    
    {#column spacing=1 padding=2
        ; Creation field
        {#row
            {#textinput text=$s.input placeholder="What needs doing?"
                on-change.{..$s input=value}
                on-submit.{..$s input="" todos={..$s.todos $s~input/todo}}
            }
        }
        ; Show filtered todos
        $s.todos 
        |filter .{{complete $s.filter~struct#1} |contains}
        |map .{todo-item}
        ; Filter buttons
        {#row spacing=0.5
            #filter |tagchildren.tag .{
                $variant = (|if $s.filter == tag "primary" "secondary")
                #button text=value#0 variant=$variant
                    on-click.{..$s filter=tag}
            }
        }
    }
}

!func :todo-item ~todo = {
    $s = (|fetch-state.rio)

    {#row spacing=1
        ; Completed check
        {#checkbox checked=complete
            $new = {title !!complete}
            on-change.{..$s todos={$s.todos $new} |replace .{title}}
        }
        ; Styled title
        $style = (|if complete "strikethrough" "normal")
        {#text text=title style=$style}
        ; Delete button
        {#iconbutton icon="material/delete"
            on-click.{..$s todos={$s.todos} |filter .{$s.title == title}}
        }
    }
}
