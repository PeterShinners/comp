; Lock-free stack using linked nodes and atomic head pointer
; Simpler approach focusing on the core lock-free algorithm

!mod.dependencies = {
    atomic = "@systems/atomic@1.0/atomic.comp"
}

!shape ~node = {
    data~str
    next~node|~nil
}

!shape ~stack = {
    head~node|~nil = {}
    ..~atomic/version
}

!func :push ~{stack~stack data~str} = {
    stack
    -> :atomic/retry-exchange 
        .{!in ..> head={data=data next=head}}
}

!func :pop ~{stack~stack} = {
    stack
    -> :atomic/retry-exchange 
        .{!in ..> head=head.next} // failure when head is {}
}

!func :test_stack = {
    $stack = ~stack
    
    ; Push some items
    $stack 
    -> :push{data="first"}
    -> :push{data="second"} 
    -> :push{data="third"}
    
    ; Pop them back
    :loop/count => {
        $stack -> :pop -> head.data -> "Popped: ${}" -> :io/print
        |> #break
    }
}

