// Comp Language Grammar for Lark Parser
// Phase 0-1 Implementation

start: statement_list

statement_list: statement+

statement: variable_declaration
         | expression

// Variable declarations
variable_declaration: "!" variable_type "." IDENTIFIER "=" expression
                    | "!" "func" ":" IDENTIFIER "=" expression

variable_type: "var"
             | "const"
             | "shape"

// Expressions (in precedence order)
expression: pipeline

pipeline: iteration (pipeline_op iteration)*

pipeline_op: "->"    // invoke
           | "=>"    // iterate
           | "?>"    // conditional
           | "!>"    // failure handler

iteration: logical_or

equality: comparison (("==" | "!=") comparison)*

comparison: addition (("<" | ">" | "<=" | ">=") addition)*

addition: multiplication (("+" | "-") multiplication)*

multiplication: unary (("*" | "/" | "%") unary)*

unary: ("!" | "-") unary
     | postfix

postfix: atom ("." IDENTIFIER | "[" expression "]")*

atom: struct
    | number
    | string
    | boolean
    | identifier
    | "(" expression ")"
    | "@"           // input reference
    | "$" IDENTIFIER // local variable

// Struct literal
struct: "{" field_list? "}"

field_list: field (WS field)*  // Space-separated also valid

field: spread
     | named_field
     | expression

spread: "..." expression

named_field: IDENTIFIER "=" expression

// Primitives
number: SIGNED_NUMBER

string: ESCAPED_STRING
      | template_string

template_string: "\"" (template_part | template_interpolation)* "\""

template_part: /[^"${\\]+/

template_interpolation: "${" expression "}"

boolean: "#true" | "#false"

identifier: ":" IDENTIFIER (":" IDENTIFIER)*  // function reference
          | "~" IDENTIFIER                      // shape reference
          | "#" IDENTIFIER ("." IDENTIFIER)*    // tag
          | IDENTIFIER                          // plain identifier

// Terminals
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/

SIGNED_NUMBER: /[+-]?\d+(\.\d+)?([eE][+-]?\d+)?/

ESCAPED_STRING: /"([^"\\]|\\.)*"/

// Comments
COMMENT: "//" /[^\n]*/

// Whitespace
WS: /[ \t\n\r]+/

%ignore WS
%ignore COMMENT